{"meta":{"title":"孙斌的技术博客","subtitle":null,"description":"聊技术，聊架构，讲段子","author":"Jackie Sun","url":"http://sunbin.tech"},"pages":[],"posts":[{"title":"使用Jhipster创建后端微服务","slug":"jhipster-lesson01","date":"2018-02-08T06:35:00.000Z","updated":"2018-02-09T02:39:07.365Z","comments":true,"path":"2018/02/08/jhipster-lesson01/","link":"","permalink":"http://sunbin.tech/2018/02/08/jhipster-lesson01/","excerpt":"","text":"Jhipster微服务项目示例程序本微服务使用JHipster 4.14.0版本生成，并根据项目需要做了一些本地化修改。整理这个程序的目的，是为了更方面的快速生成微服务。 开发环境要求鉴于公司电脑默认要求使用Windows系统。因此要求开发电脑使用的操作系统为Windows10。如下是在Windows10下开发环境的要求。请认真阅读，确保环境具备。 1、本机需要安装JDK8环境，具体的版本号为：JDK-For-Windows-1.8.0_111 64Bit。安装介质已经上传至百度网盘，网盘地址：链接：https://pan.baidu.com/s/1jKckp6I 密码：8lnj。JDK的设置方法不再赘述。验证方法：打开cmd或powershell，输入java -version。系统显示如下代表安装成功： java version &quot;1.8.0_111&quot; Java(TM) SE Runtime Environment (build 1.8.0_111-b14) Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode) 2、本机需要安装Maven环境，具体版本号为：Apache Maven 3.3.9。安装介质已经上传至百度网盘，网盘地址：链接：https://pan.baidu.com/s/1dWuUfk 密码：6n53j。建议解压到D盘根目录，然后创建在D盘根目录创建文件夹localRepository。这样解压后不用修改配置。Maven环境的安装方法不再赘述。验证方法：打开cmd或powershell，输入mvn -version。系统显示如下代表安装成功： Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00) Maven home: D:\\apache-maven-3.3.9\\bin\\.. Java version: 1.8.0_111, vendor: Oracle Corporation Java home: C:\\Program Files\\Java\\jdk1.8.0_111\\jre Default locale: zh_CN, platform encoding: GBK OS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;dos&quot; 3、本机需要安装Docker。 第一步：开启HyperV开启HyperV之前，如果本机已经安装了第三方虚拟机软件，需要首先卸载第三方虚拟机（如：Vmware、Virsualbox），否则会引起冲突导致安装失败。卸载完成后，开启HyperV步骤请参见：https://jingyan.baidu.com/article/86fae346c9311e3c49121aa9.html 第二步：安装Docker for Windows由于各省项目地安装的Docker版本是17.12.CE。因此，安装之前请确认版本号。确认在版本号在”17.12.0-ce-win46”以上。可以从官方网站下载最新Docker版本。官网下载地址：https://docs.docker.com/docker-for-windows/install/#download-docker-for-windows 第三步：验证安装。打开cmd或powershell，输入：docker –version。系统显示如下代表安装成功： Docker version 17.12.0-ce, build c97c6d6 4、需要本机安装Java开发IDE：STS-64Bit（Spring Tool Suite）。可在官网下载：https://spring.io/tools/sts/all 请注意下载Windows64位版本，与JDK位数需要一致 程序使用方法从压缩包中解压项目后，替换项目目录下所有文件，将microexample关键字（严格区分大小写）替换为自己想要命名的微服务名称，如：microconfig。正常情况下，应有21个文件，66处结果需要替换。 注意：我们要求微服务名称全部使用英文小写，字符串必须是纯英文。不可以带有特殊字符（空格、下划线、横线、数字都不允许） 修改完成后，即可使用通过导入一个Maven工程的方式，导入项目。 开发方法论问题思考很多同事和朋友对于微服务更加敏捷的开发模式还不太适应。首先我们思考几个问题： 1、你是否遇到过这种情况：当项目变大的时候，项目的依赖很多。很多功能必须要把完整的项目跑起来才有可能研发和测试。但项目的启动和配置本身就成为了大麻烦，更别说开发和测试了。我们需要花好几倍的时间去维护一个脆弱的开发环境。别人接手起来好几天才能上手。 2、你是否遇到过这种情况：前后端的联调总是很费劲，对方总是犯一些低级的错误让你非常恼火。结果导致，联调和排查错误花费的时间比开发时间还要长。 3、你是否遇到这种情况：公司里没有一套像样的开发数据库的环境。开发数据库的环境总是乱七八糟。但是，你又离不开他。你无法在不连接VPN的情况下远程调试程序，没有环境你啥也干不了。 如果你遇到了这样的问题，应该考虑一下换一种开发的思维。用更现代的方法去对待你的开发工作。起初你会觉得很麻烦，但习惯之后，回头想想之前开发时遇到的种种困境，你会觉得非常值得。 开发建议我们有几点开发的建议和要求： 1、契约优先。Web接口和测试总是第一位的。我们要求：做好接口设计，用Swagger注解将接口定义的没有任何分歧，与前端同学达成完全一致。其次在功能代码编写之前就编写测试，甚至说应该邀请另一个人写测试，这对于习惯于裸奔的程序员来说可能有点难以接受。大多数情况下，测试是非常必要的。一次编码的投入，带来的是每次构建时都出触发的自动化测试，绝对物超所值。在Jhipster微服务提供的能力中，写一个MockMVC的测试是一件简单的事情。示例程序中，我们也会提供一些示例代码帮助大家学习。 2、让你的项目始终保持单机可开发模式。说的更明白一点。项目里包含了你开发依赖的所有要素，从不管是数据库、第三方中间件还是配置、源码，都在里面。利用这些，你可以在家喝着咖啡将环境复原到与现场环境一致的程度。并且，原则上你是很独立的，不需要考虑系统整体的部署运行，你的关注点应完全放在：怎么能让接口WORK！一切以接口为中心就对了。在Jhipster微服务提供的能力中，这些都可以实现。 3、前后端联调是一项繁重的工作，也是一个综合性、耗人耗时的工作。这时或许你不得不启动一套完整的系统。我们建议：使用持续集成工作，会让你十分愉快，至少会节约很多时间。Jhipster也为我们提供了相应的工具。 开发STS基本设置1、修改默认Mavens设置。windows-preferences-Maven，修改为本机的Maven工具。 2、更改默认JDK。windows-preferences-installed JRE，修改为本机的JDK8。一定注意，项目构建使用JDK而非JRE，否则在编译执行过程中会出错。 3、（可选）如果你是熟练手，建议关掉验证功能：windows-preferences-Validation，选择Suspend All Validators。 Docker基本设置我天朝的网络，连接官方的Docker Store堪称龟速。因此，建议大家首先修改镜像服务器的地址。在Windows右下角状态栏，右键Docker图标，点击Setting-Deamon。在Registry mirros中输入 https://registry.docker-cn.com 点击Apply生效。 使用Docker初始化项目基本环境启动Jhipster Registry服务注册中心是微服务开发必须要启动的工程。启动方法：在项目根目录执行命令： docker-compose -f src/main/docker/jhipster-registry.yml up 验证方法：访问 http://localhost:8761/ 登录用户名密码默认为admin/admin 启动Oracle使用Docker启动一个Oracle实例非常简单。为了测试和还原，我们不建议给Oracle镜像挂载任何的卷信息，以保证数据库在每次启动时回到初始状态。启动方法：在项目根目录执行命令： docker-compose -f src/main/docker/oracle.yml up 没错，就这么简单。数据库登录方法： hostname: localhost port: 1521 sid: xe username: system password: oracle 你也可以登录OracleXE的管理员界面。登录方法： http://localhost:1580/apex workspace: INTERNAL user: ADMIN password: oracle 启动KafkaKafka是一个分布式的消息队列中间件，在微服务组件异步交互中经常使用。启动方法：在项目根目录执行命令： docker-compose -f src/main/docker/kafka.yml up 执行命令后系统会自动启动一个Kafka实例和Zookeeper实例，并默认生成一个名为topic-jhipster的TOPIC hostname：localhost kafka-port：9092 zookeeper-port：2181 topics：topic-jhipster 启动项目To start your application in the dev profile, simply run: ./mvnw For further instructions on how to develop with JHipster, have a look at Using JHipster in development. 生产版本打包To optimize the microconfig application for production, run: ./mvnw -Pprod clean package To ensure everything worked, run: java -jar target/*.war Refer to Using JHipster in production for more details. 测试方法To launch your application’s tests, run: ./mvnw clean test For more information, refer to the Running tests page. 使用Docker简化搭建部署环境You can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the src/main/docker folder to launch required third party services. For example, to start a oracle database in a docker container, run: docker-compose -f src/main/docker/oracle.yml up -d To stop it and remove the container, run: docker-compose -f src/main/docker/oracle.yml down You can also fully dockerize your application and all the services that it depends on.To achieve this, first build a docker image of your app by running: ./mvnw verify -Pprod dockerfile:build Then run: docker-compose -f src/main/docker/app.yml up -d For more information refer to Using Docker and Docker-Compose, this page also contains information on the docker-compose sub-generator (jhipster docker-compose), which is able to generate docker configurations for one or several JHipster applications. Continuous Integration (optional)To configure CI for your project, run the ci-cd sub-generator (jhipster ci-cd), this will let you generate configuration files for a number of Continuous Integration systems. Consult the Setting up Continuous Integration page for more information.","categories":[],"tags":[{"name":"Jhipster","slug":"Jhipster","permalink":"http://sunbin.tech/tags/Jhipster/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-01-04T03:46:18.570Z","updated":"2018-01-04T03:46:18.570Z","comments":true,"path":"2018/01/04/hello-world/","link":"","permalink":"http://sunbin.tech/2018/01/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}